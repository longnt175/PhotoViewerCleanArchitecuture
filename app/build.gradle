apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'me.tatarka.retrolambda'

// Libraries versions
def lib = [lombok            : "1.16.18",
           kotlin            : "1.1.2-3",
           dagger            : "2.11",
           butterknife       : "8.6.0",
           googleSupport     : "25.3.1",
           rxAndroid         : "2.0.1",
           rxJava            : "2.1.4",
           ormlite           : "5.0",
           okhttp3           : "3.8.0",
           retrofit2         : "2.3.0",
           retrofitRxJava2   : '1.0.0',
           retrofitLogging   : '3.9.0',
           timber            : '4.5.1',
           picasso           : "2.5.2",
           testSupport       : "0.5",
           cucumber          : "1.2.2",
           espresso          : "2.2.2"]

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.2'

  defaultConfig {
    applicationId "com.photoviewer"
    minSdkVersion 17
    targetSdkVersion 25
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "com.photoviewer.cucumber.CucumberTestRunner"
  }
  buildTypes {
    debug {
      minifyEnabled false
      buildConfigField "String", "CUCUMBER_TAGS", "\"${getCucumberTags()}\""
    }

    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    checkReleaseBuilds false
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  provided  "org.projectlombok:lombok:${lib.lombok}"
  compile "org.jetbrains.kotlin:kotlin-stdlib:${lib.kotlin}"

  // Dependency Injection
  compile "com.google.dagger:dagger:${lib.dagger}"
  provided "com.google.dagger:dagger-compiler:${lib.dagger}"

  // View Injection
  compile "com.jakewharton:butterknife:${lib.butterknife}"
  annotationProcessor "com.jakewharton:butterknife-compiler:${lib.butterknife}"

  // Google libraries
  compile "com.android.support:support-annotations:${lib.googleSupport}"
  compile "com.android.support:appcompat-v7:${lib.googleSupport}"
  compile "com.android.support:design:${lib.googleSupport}"
  compile "com.android.support:recyclerview-v7:${lib.googleSupport}"

  // ReactiveX
  compile "io.reactivex.rxjava2:rxjava:${lib.rxJava}"
  compile "io.reactivex.rxjava2:rxandroid:${lib.rxAndroid}"

  // Database
  compile "com.j256.ormlite:ormlite-core:${lib.ormlite}"
  compile "com.j256.ormlite:ormlite-android:${lib.ormlite}"

  // OkHttp
  compile "com.squareup.okhttp3:okhttp-urlconnection:${lib.okhttp3}"
  compile "com.squareup.okhttp3:okhttp:${lib.okhttp3}"


  // Retrofit
  compile "com.squareup.retrofit2:retrofit:${lib.retrofit2}"
  compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${lib.retrofitRxJava2}"
  compile "com.squareup.retrofit2:converter-gson:${lib.retrofit2}"
  compile "com.squareup.okhttp3:logging-interceptor:${lib.retrofitLogging}"
  compile "com.jakewharton.timber:timber:${lib.timber}"

  // Image Loader
  compile "com.squareup.picasso:picasso:${lib.picasso}"
  compile "com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0"

  // Unit test
  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:2.6.5'
  testCompile 'org.assertj:assertj-core:1.7.1'

  // Kotlin Unit Tests
  testCompile "org.jetbrains.kotlin:kotlin-test:${lib.kotlin}"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:${lib.kotlin}"
  testCompile "com.nhaarman:mockito-kotlin:1.2.0"

  // Android Tests
  androidTestCompile("com.android.support.test:runner:${lib.testSupport}") {
    exclude module: 'support-annotations'
  }
  androidTestCompile("com.android.support.test:rules:${lib.testSupport}") {
    exclude module: 'support-annotations'
  }

  // Cucumber
  androidTestCompile "info.cukes:cucumber-android:${lib.cucumber}"
  androidTestCompile "info.cukes:cucumber-picocontainer:${lib.cucumber}"

  // Espresso
  androidTestCompile("com.android.support.test.espresso:espresso-core:${lib.espresso}") {
    exclude module: 'support-annotations'
  }
  androidTestCompile ("com.android.support.test.espresso:espresso-idling-resource:${lib.espresso}") {
    exclude module: 'support-annotations'
  }
  androidTestCompile ("com.android.support.test.espresso:espresso-contrib:${lib.espresso}") {
    exclude module: 'support-annotations'
    exclude module: 'appcompat-v7'
    exclude module: 'recyclerview-v7'
    exclude module: 'support-v4'
    exclude module: 'design'
  }

  androidTestCompile ("com.jakewharton.espresso:okhttp3-idling-resource:1.0.0") {
    exclude module: 'okio'
    exclude module: 'support-annotations'
    exclude module: 'okhttp'
  }
}

/**
 *  Read Cucumber tags from command line like: ./gradlew connectedAndroidTest -Dtags="@functional-scenarios,@nougat"*/
def getCucumberTags() {
  return project.hasProperty("tags") ? project.getProperties().get("tags") : ""
}
